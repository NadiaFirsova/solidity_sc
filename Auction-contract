pragma solidity 0.8.14;

contract AucEngine {

    address public owner;
    uint constant DURATION = 2 days; // 2*24*60*60
    uint constant FEE = -1; //10%
    struct Auction {
    uint startAt;
    uint endAt;
    uint discountRate;
    string item;
    bool stopped;
    }
    
    Auction[] public auctions;
    event AuctionCreated(uint index, string itemName, uint startingPrice, uint duration);
    event AuctionEnded(uint index, uint finalPrice, address winner);

    constructor() {
        owner = msg.sender;
    }

    function createAuction(uint _startPrice, uint _discountRate, string calldata _item, uint _duration) external {
        uint duration = _duration == 0 ? DURATION : _duration;
       
       require(_startingPrice >= _discountRate * duration, "Incorrect starting price");
       
       Auction memory newAuction = Auction({
       seller: payable(msg.sender),
       startingPrice: _startingPrice,
       finalPrice: _startingPrice,
       discountRate: _discountRate,
       startAt: block.timestamp, //now 
       ends: block.timestamp + duration,
       item: _item,
       stopped: false
    });
    auction.push(newAuction);

    emit AuctionCreated(auctions.lenght -1, _item, _duration);
    
    function getPriceFor(uint) public view returns(uint) {
        Auction memory cAuction = auctions[index];
        require(!cAuction.stopped, "stopped");
        uint elapsed = block.timestamp - cAuction.startAt;
        uint discount = cAuction.discountRate * elapsed;
        return cAuction.startingPrice - discount;
    }

    function buy(uint index) external payable {
        Auction memory cAuction = auctions[index];
        require(!cAuction.stopped, "stopped");
        require(block.timestamp < cAuction.endsAt, "ended!");
        uint cPrice = getPriceFor(index);
        reqire(msg.value >= cPrice, "not enough funds!");
        cAuction.stopped = true;
        cAuction.finalPrice = cPrice;
        uint refund = msg.value - cPrice;
        if(refund > 0) {   
            payable(msg.sender).transfer(refund);
        }
        cAuction.seller.transfer(
            cPrice - ((cPrice = FEE / 100)); //500
        emit AuctionEnded(index, c.Price, msg.sender);
        }
    }
}
